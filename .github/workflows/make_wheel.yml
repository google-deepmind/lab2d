# A workflow to run Bazel builds and tests.

name: release_wheel

on:
  workflow_dispatch:
  push:
    tags:
      - 'release*'

jobs:
  create-release:
    name: Create new draft release

    runs-on: 'ubuntu-22.04'

    timeout-minutes: 30

    outputs:
      upload-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build-wheel:
    name: Build-wheel ${{ matrix.cfg.name }} for Python ${{ matrix.py.version }}

    runs-on: ${{ matrix.cfg.os }}

    needs: create-release

    strategy:
      matrix:
        cfg:
          - { name: 'Linux LLVM+libstdc++', os: 'ubuntu-22.04', cc: clang, cxx: clang++, config: --linkopt=-fuse-ld=lld }
          - { name: 'MacOS 11 x86_64 LLVM+libc++', os: 'macos-11', cc: clang, cxx: clang++, config: --config=libc++ --config=macos }
          - { name: 'MacOS 12 x86_64 LLVM+libc++', os: 'macos-12', cc: clang, cxx: clang++, config: --config=libc++ --config=macos }
          - { name: 'MacOS 13 x86_64 LLVM+libc++', os: 'macos-13', cc: clang, cxx: clang++, config: --config=libc++ --config=macos }
          - { name: 'MacOS 12 ARM64 LLVM+libc++', os: 'macos-12', cc: clang, cxx: clang++,
              config: --config=libc++ --config=macos_arm64 --repo_env=PY_PLATFORM_OVERRIDE=macosx_12_0_arm64 }
          - { name: 'MacOS 13 ARM64 LLVM+libc++', os: 'macos-13', cc: clang, cxx: clang++,
              config: --config=libc++ --config=macos_arm64 --repo_env=PY_PLATFORM_OVERRIDE=macosx_13_0_arm64 }
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    env:
      CC:  ${{ matrix.cfg.cc }}
      CXX: ${{ matrix.cfg.cxx }}
      WHEEL_NAME: ''
      WHEEL_PATH: ''

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Dependencies
        run: pip3 install --upgrade pip packaging

      - name: Build for Python ${{ matrix.python-version }}
        run: bazel --bazelrc=.bazelrc build --compilation_mode=opt --dynamic_mode=off --config=luajit ${{ matrix.cfg.config }} //dmlab2d:dmlab2d_wheel

      - name: Get built wheel name
        working-directory: bazel-bin/dmlab2d
        run: |
          WHEEL_NAME="$(ls *.whl)"
          WHEEL_PATH="$(pwd)/${WHEEL_NAME}"
          echo WHEEL_PATH="${WHEEL_PATH}" >> "${GITHUB_ENV}"
          echo WHEEL_NAME="${WHEEL_NAME}" >> "${GITHUB_ENV}"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ${{ env.WHEEL_PATH }}
          asset_name: ${{ env.WHEEL_NAME }}
          asset_content_type: application/zip

      - name: Check wheel contents
        run: |
          pip install --upgrade check-wheel-contents
          check-wheel-contents ${{ env.WHEEL_PATH }}

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ env.WHEEL_PATH }}
          retention-days: 1

  upload-wheel-to-pypi:
    name: Upload wheel to Pypi
    runs-on: ubuntu-latest
    needs: build-wheel
    timeout-minutes: 30

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v3

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TESTPYPI_API_TOKEN }}
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish package to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist
          verbose: true
